Функция ВыполнитьЗапросAPI(Запрос,Параметры=Неопределено,Подключение=Неопределено) Экспорт
	//Параметры: Структура ИмяПараметра -> Значение
	Ошибка = Ложь;
	ТекстЗапроса = "" + Запрос;
	МассивПараметров = Новый Массив;                                               
	
	Если Не Параметры = Неопределено Тогда
		Для Каждого КлючИЗначение Из Параметры Цикл
			МассивПараметров.Добавить("" + КлючИЗначение.Ключ + "=" + ?(ТипЗнч(КлючИЗначение.Значение)=Тип("Число"),Формат(КлючИЗначение.Значение,"ЧГ="),КлючИЗначение.Значение));                                      
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПараметров = "";
	Для Каждого СтрокаПараметра Из МассивПараметров Цикл
		Если СтрокаПараметров <> "" Тогда
			СтрокаПараметров = СтрокаПараметров + "&";
		КонецЕсли;
		СтрокаПараметров = СтрокаПараметров + СтрокаПараметра;
	КонецЦикла;
	
	Если СтрокаПараметров <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + "?" + СтрокаПараметров;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = Неопределено;
	Если Подключение = Неопределено Тогда
		Подключение = Новый HTTPСоединение(Константы.АдресAPIPolygonscan.Получить(), 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	КонецЕсли;
	Попытка
		Ответ = Подключение.Получить(Запрос);
	Исключение
		Ответ = "Ошибка выполнения";
		Ошибка = Истина;
	КонецПопытки;

	Возврат Новый Структура("Подключение,Ответ,Ошибка",Подключение,Ответ,Ошибка);
КонецФункции

Процедура ЗагрузитьБаланс(Кошелек=Неопределено) Экспорт 
	МассивКошельков = Новый Массив;
	Если Кошелек = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Криптокошельки.Ссылка КАК КриптоКошелек
			|ИЗ
			|	Справочник.Криптокошельки КАК Криптокошельки
			|ГДЕ
			|	Криптокошельки.Сеть = &Сеть";
		
		Запрос.УстановитьПараметр("Сеть", Справочники.Блокчейны.Polygon);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивКошельков.Добавить(ВыборкаДетальныеЗаписи.КриптоКошелек);
		КонецЦикла;
	Иначе
		МассивКошельков = Кошелек;
	КонецЕсли;
	Для Каждого КошелекКЗапросу Из МассивКошельков Цикл
		Если КошелекКЗапросу.Сеть <> Справочники.Блокчейны.Polygon Тогда
			Возврат;
		КонецЕсли;
		Параметры = Новый Структура;
		Параметры.Вставить("module","account");
		Параметры.Вставить("address",КошелекКЗапросу.Наименование);
		Параметры.Вставить("tag","latest");
		Параметры.Вставить("apikey",Константы.ТокенPolyscanAPI.Получить());
		Если КошелекКЗапросу.Валюта = Справочники.Валюты.Matic Тогда
			Параметры.Вставить("action","balance");
		Иначе
			Параметры.Вставить("action","tokenbalance");
			Параметры.Вставить("contractaddress",КошелекКЗапросу.АдресКонтракта);
		КонецЕсли;
		Период = ТекущаяДата();
		РезультатЗапроса = ВыполнитьЗапросAPI("api",Параметры);
		Если Не РезультатЗапроса.Ошибка Тогда
			Ответ = РезультатЗапроса.Ответ;		
			
			ОтветJSONСтрока = Ответ.ПолучитьТелоКакСтроку();
			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ОтветJSONСтрока);
			ДанныеPolygon = ПрочитатьJSON(ЧтениеJSON,Ложь);
			ЧтениеJSON.Закрыть();	
			
			Если ДанныеPolygon.status = "1" Тогда //получен ответ
				Баланс = ДанныеPolygon.result;
				
				НаборЗаписейБаланса = РегистрыСведений.БалансКошелька.СоздатьНаборЗаписей();
				
				НаборЗаписейБаланса.Отбор.Период.Установить(Период);
				ЗаписьБаланса = НаборЗаписейБаланса.Добавить();
				ЗаписьБаланса.Период = Период;
				ЗаписьБаланса.Баланс = Баланс;
				ЗаписьБаланса.Кошелек = КошелекКЗапросу;
				
				НаборЗаписейБаланса.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
