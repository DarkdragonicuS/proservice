
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОСТРОЕНИЯ ДЕРЕВА ПОДЧИНЕННОСТИ ДОКУМЕНТОВ

&НаСервере
Процедура ОбновитьДеревоСтруктурыПодчиненности()

	Если ОсновнойДокументДоступен() Тогда
		Сформировать(ТаблицаОтчета);
	Иначе
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//	Нстр("ru = 'Документ, для которого сформирован отчет о структуре подчиненности, стал недоступен.'"));
		//NIXI:
		Сообщить(Нстр("ru = 'Документ, для которого сформирован отчет о структуре подчиненности, стал недоступен.'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОсновнойДокументДоступен()

	МетаданныеОбъекта = ОбъектСсылка.Метаданные();
	
	//Если ТипЗнч(ОбъектСсылка) = Тип("ЗадачаСсылка.Задача") Тогда
	//	Запрос = Новый Запрос(
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	1
	//	|ИЗ
	//	|	Задача." + МетаданныеОбъекта.Имя + " КАК Таб
	//	|ГДЕ
	//	|	Таб.Ссылка = &ОбъектСсылка
	//	|");
	//ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1
		|ИЗ
		|	Справочник." + МетаданныеОбъекта.Имя + " КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &ОбъектСсылка
		|");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1
		|ИЗ
		|	Документ." + МетаданныеОбъекта.Имя + " КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &ОбъектСсылка
		|");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Формирует дерево документов.
//
// Параметры:
//  Таб - табличный документ, в который выводится дерево.
//
&НаСервере
Процедура Сформировать(Таб)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
	Дерево.Строки.Очистить();
	
	Таб.Очистить();
	СписокОбъектов = Новый СписокЗначений();
	СписокОбъектов.Добавить(ОбъектСсылка);
	Корень = НайтиКорень(ОбъектСсылка, СписокОбъектов);
	
	Выборка = ПолучитьВыборкуПоРеквизитамОбъекта(Корень);
	
	Если Выборка.Следующий() Тогда
		СтрокаДерева = ДобавитьСтрокуВДерево(Дерево, Выборка);
	КонецЕсли;
	
	ЗаполнитьДеревоДокументов(Корень, СтрокаДерева, Корень);
	Макет = Обработки.ДеревоДокументов.ПолучитьМакет("Дерево");
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
	
	ПечатьДереваДокументов(1, Дерево, Таб, Макет);
	ФорматированиеТаблицы(Таб);
	Таб.ТекущаяОбласть = Таб.Область(1, 1, 1, 1);
	
КонецПроцедуры

// Получает выборку по реквзитам документа
//
// Параметры
//  ДокументСсылка  - ДокументСсылка - документ, значения реквзитов которого получаются запросом.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса  
//
&НаСервере 
Функция ПолучитьВыборкуПоРеквизитамОбъекта(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	//Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.Задача") Тогда
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Ссылка,                       
	//	|	NULL КАК ВидОперации,
	//	|	NULL КАК Проведен,
	//	|	ПометкаУдаления,
	//	|	NULL КАК СуммаДокумента,
	//	|	NULL КАК ВалютаДокумента,
	//	|	Исполнитель КАК Контрагент,
	//	|	NULL КАК КатегорияЦен,
	//	|	Представление,
	//	|	Выполнена,
	//	|	Отменена,
	//	|	Проверена,
	//	|	Контролер
	//	|ИЗ
	//	|	Задача." + МетаданныеОбъекта.Имя + "
	//	|ГДЕ
	//	|	Ссылка = &Ссылка
	//	|";
	//ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,                       
		|	NULL КАК ВидОперации,
		|	NULL КАК Проведен,
		|	ПометкаУдаления,
		|	NULL КАК СуммаДокумента,
		|	NULL КАК ВалютаДокумента,
		|	NULL КАК Контрагент,
		|	NULL КАК КатегорияЦен,
		|	Представление,
		|	NULL КАК Выполнена,
		|	NULL КАК Отменена,
		|	NULL КАК Проверена,
		|	NULL КАК Контролер
		|ИЗ
		|	Справочник." + МетаданныеОбъекта.Имя + "
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,
		|	#ВидОперации,
		|	Проведен,
		|	ПометкаУдаления,
		|	#Сумма,
		|	#Валюта,
		|	#Контрагент,
		|	#КатегорияЦен,
		|	Представление,
		|	NULL КАК Выполнена,
		|	NULL КАК Отменена,
		|	NULL КАК Проверена,
		|	NULL КАК Контролер
		|ИЗ
		|	Документ." + МетаданныеОбъекта.Имя + "
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
		ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, "#ВидОперации", "ВидОперации");
		ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, "#Сумма", "СуммаДокумента");
		ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, "#Валюта", "ВалютаДокумента");
		ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, "#Контрагент", "Контрагент");
		ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, "#КатегорияЦен", "КатегорияЦен");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ()

&НаСервере
Процедура ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеОбъекта, ЧтоЗаменять, ИмяРеквизита)

	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, ИмяРеквизита + " КАК " + ИмяРеквизита);

	Иначе

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, " NULL КАК " + ИмяРеквизита);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)

	НоваяСтрока = СтрокиДерева.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, ВидОперации, Представление, СуммаДокумента, ВалютаДокумента, Контрагент, КатегорияЦен, Проведен, ПометкаУдаления, Выполнена, Отменена, Проверена, Контролер");
	
	Возврат НоваяСтрока;                                                                                           
	
КонецФункции

// Функция ищет корень у выбранного документа
//
// Параметры:
//  Корень           - документ, у которого ищется корень,
//  СписокДокументов - список документов, чтобы исключить зацикливание.
//
// Возвращаемое значение:
//  Корень документа.
//
&НаСервере
Функция НайтиКорень(ТекущийОбъект, СписокОбъектов)
	
	Основание = Неопределено;
	
	//Если ТипЗнч(ТекущийОбъект) = Тип("ЗадачаСсылка.Задача") Тогда
	//	Попытка
	//		Основание = ТекущийОбъект.Предмет;
	//	Исключение
	//	КонецПопытки;
	//Иначе
		Попытка
			Основание = ТекущийОбъект.ДокументОснование;
		Исключение 
		КонецПопытки;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		НовКорень = Основание;
	Иначе
		НовКорень = Неопределено;
	КонецЕсли;
	
	Если НовКорень = Неопределено Тогда
		
		Возврат ТекущийОбъект;
		
	ИначеЕсли СписокОбъектов.НайтиПоЗначению(НовКорень) <> Неопределено Тогда
		
		Возврат НовКорень;
		
	Иначе
		
		СписокОбъектов.Добавить(НовКорень);
		Возврат НайтиКорень(НовКорень, СписокОбъектов);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектовПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Если Метаданные.КритерииОтбора.СвязанныеОбъекты.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеОбъекты.Ссылка КАК Ссылка,
		|	СвязанныеОбъекты.Ссылка.Дата КАК Дата
		|ИЗ
		|	КритерийОтбора.СвязанныеОбъекты(&ЗначениеКритерияОтбора) КАК СвязанныеОбъекты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора",ЗначениеКритерияОтбора);
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
	
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Заполняет дерево документов.
//
&НаСервере
Процедура ЗаполнитьДеревоДокументов(ОбъектРодитель, КореньДерева , КореньВерхнегоУровня)
	
	ТЗ = ПолучитьСписокОбъектовПоКритериюОтбора(ОбъектРодитель);
	
	МассивПодчиненныхОбъектов = ТЗ.ВыгрузитьКолонку("Ссылка");
	
	Для Индекс = 0 По МассивПодчиненныхОбъектов.ВГраница() Цикл
		
		ОбъектУзла = МассивПодчиненныхОбъектов[Индекс];
		
		Если ОбъектУзла = КореньВерхнегоУровня Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ПолучитьВыборкуПоРеквизитамОбъекта(ОбъектУзла);
		
		Если Выборка.Следующий() Тогда
			Лист = ДобавитьСтрокуВДерево(КореньДерева, Выборка);
		КонецЕсли;
		
		ЗаполнитьДеревоДокументов(МассивПодчиненныхОбъектов[Индекс], Лист, КореньВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫВОДА В ТАБЛИЧНЫЙ ДОКУМЕНТ

// Выводит дерево документов в табличный документ.
//
// Параметры:
//  НомерСтроки - номер текущей строки в табличном документа,
//  Корень      - корень документа,
//  Таб         - табличный документ,
//  Макет       - макет, по которому строится табличный документ.
//

&НаСервере
Процедура ПечатьДереваДокументов(НомерСтроки, Корень, Таб, Макет)
	
	КолСтрок = Корень.Строки.Количество();
	Для Индекс = 0 По КолСтрок - 1 Цикл
		
		Если Индекс < КолСтрок - 1 Тогда
			ОбластьЛиния = Макет.ПолучитьОбласть("Область_Развилка");
		Иначе
			ОбластьЛиния = Макет.ПолучитьОбласть("Область_ПослРазвилка");
		КонецЕсли;
		
		Строка = Корень.Строки[Индекс];
		
		НомерСтолбца = 2 + Строка.Уровень() * 2;
		НомерПослСтроки = НомерСтроки + 4;
		НомерПослСтолбца = НомерСтолбца + 14;
		Область = Таб.Область(НомерСтроки, НомерСтолбца, НомерПослСтроки, НомерПослСтолбца);
		
		Иконка = Новый Картинка;
		
		//Если ТипЗнч(Строка.Ссылка) = Тип("ЗадачаСсылка.Задача") Тогда
		//	Если Строка.ПометкаУдаления Тогда 
		//    	Иконка = БиблиотекаКартинок.ЗадачаПомеченаНаУдаление
		//	Иначе
		//		Если Не Строка.Выполнена Тогда
		//			Иконка = БиблиотекаКартинок.ЗадачаЗаписана
		//		Иначе
		//			Если Строка.Выполнена И Строка.Отменена Тогда
		//				Иконка = БиблиотекаКартинок.ЗадачаОтменена;
		//			Иначе
		//				Если Строка.Выполнена И Строка.Контролер <> "" И Не Строка.Проверена Тогда
		//					Иконка = БиблиотекаКартинок.ЗадачаНаКонтроле;
		//				Иначе
		//					Иконка = БиблиотекаКартинок.ЗадачаВыполнена;
		//				КонецЕсли;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;			
		//Иначе
		
		//NIXI:
			//Если Строка.Проведен Тогда
			//	Иконка = БиблиотекаКартинок.ДокументПроведен;
			//ИначеЕсли Строка.ПометкаУдаления Тогда
			//	Иконка = БиблиотекаКартинок.ДокументПомеченНаУдаление;
			//Иначе
			//	Иконка = БиблиотекаКартинок.ДокументЗаписан;
			//КонецЕсли;
		//КонецЕсли;
		
		Если Строка.Уровень() = 0 Тогда
			
			ОбластьЯч = Макет.ПолучитьОбласть("Область_Заголовок");
			ОбластьЯч.Рисунки.Иконка.Картинка = Иконка;
			
		ИначеЕсли Строка.Ссылка = ОбъектСсылка Тогда
			
			ОбластьЛинииТаб = Таб.Область(НомерСтроки, НомерСтолбца - 2, НомерПослСтроки, НомерСтолбца - 1);
			Таб.ВставитьОбласть(ОбластьЛиния.Область(), ОбластьЛинииТаб);
			
			ОбластьЯч = Макет.ПолучитьОбласть("Область_ТекущийДокумент");
			
			ОбластьЯч.Рисунки.ТекущаяИконка.Картинка = Иконка;
			
		Иначе
			
			ОбластьЛинииТаб = Таб.Область(НомерСтроки, НомерСтолбца - 2, НомерПослСтроки, НомерСтолбца - 1);
			Таб.ВставитьОбласть(ОбластьЛиния.Область(), ОбластьЛинииТаб);
			
			ОбластьЯч = Макет.ПолучитьОбласть("Область_Группа");
			
			ОбластьЯч.Рисунки.ИконкаГруппы.Картинка = Иконка;
			
		КонецЕсли;
		
		ОбластьЯч.Параметры.ПечДок        = Строка(Строка.Ссылка);
		ОбластьЯч.Параметры.ИнфСтрока     = ПолучитьИнфСтроку(Строка);
		ОбластьЯч.Параметры.ДопИнформация = ПолучитьДопИнформацию(Строка);
		
		СтрокаВидОперации = Строка(Строка.ВидОперации);
		СтрокаВидОперации = ?(СтрокаВидОперации = "", "", "Вид операции: " + СтрокаВидОперации);
		
		ОбластьЯч.Параметры.ВидОперации	  = СтрокаВидОперации;											
		
		СтруктураРасшифровкиДок = Новый Структура("Ссылка, Тип", Строка.Ссылка, "Ссылка");
		ОбластьЯч.Параметры.ТекДок = СтруктураРасшифровкиДок;
		СтруктураРасшифровкиЖур = Новый Структура("Ссылка, Тип", Строка.Ссылка, "Журнал");
		ОбластьЯч.Параметры.ЖурДок = СтруктураРасшифровкиЖур;
		ТабВрем = Новый ТабличныйДокумент();
		ТабВрем.Вывести(ОбластьЯч);
		
		//Изменение цвета
		ОбластьВрем = ТабВрем.Область(1, 1, 5, 15);
		
		УстановкаЦвета(ТабВрем.Область(), Строка);
		Таб.ВставитьОбласть(ТабВрем.Область(1, 1, 5, 15), Область);
		НомерСтроки = НомерСтроки + 5;
		Таб.НачатьГруппуСтрок();
		СтНомерСтроки = НомерСтроки;
		ПечатьДереваДокументов(НомерСтроки, Строка, Таб, Макет);
		Таб.ЗакончитьГруппуСтрок();
		//Дорисовывание прямых линий
		Если (Строка.Уровень() <> 0) И (Индекс < КолСтрок - 1) Тогда

			ОбластьПрям = Макет.ПолучитьОбласть("Область_ПрямаяЛиния");
			
			Пока СтНомерСтроки < НомерСтроки Цикл
				
				ОбластьЛинииТаб = Таб.Область(СтНомерСтроки, НомерСтолбца - 2, СтНомерСтроки + 4, НомерСтолбца - 1);
				Таб.ВставитьОбласть(ОбластьПрям.Область(), ОбластьЛинииТаб);
				СтНомерСтроки  = СтНомерСтроки + 5;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Процедура устанавливает цвет области.
//
// Параметры:
//  Область      - область табличного документа,
//  СтрокаДерева - строка дерева, по которой определяется документа.
//
&НаСервере
Процедура УстановкаЦвета(Область, СтрокаДерева)
	
	Если //ТипЗнч(СтрокаДерева.Ссылка) <> Тип("ЗадачаСсылка.Задача")
		//И 
		Не Метаданные.Справочники.Содержит(СтрокаДерева.Ссылка.Метаданные())
		И СтрокаДерева.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить		
		И НЕ СтрокаДерева.Ссылка.Проведен Тогда
		
		Область.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
		
	Если СтрокаДерева.Ссылка.ПометкаУдаления Тогда
		
		Область.ЦветТекста = WebЦвета.Серый;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает инф. строку (2 строка в ячейке)
//
// Параметры:
//  Док - текущий документ.
//
// Возвращаемое значение:
//  Информационная строка.
//
&НаСервере
Функция ПолучитьИнфСтроку(СтрокаДерева)
	
	ИнфСтрока = "";
	
	//Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.АктПереоценки") Тогда
	//	
	//	ИнфСтрока = СтрокаДерева.КатегорияЦен;
	//	
	//Иначе
		
		ИнфСтрока = ИнфСтрока + СтрокаДерева.Контрагент;
		
	//КонецЕсли;
	
	Возврат ИнфСтрока;
		
КонецФункции

// Функция получает доп. информацию(3 строка в ячейке)
//
// Параметры:
//  Док - текущий документ.
//
// Возвращаемое значение:
//  Строка с доп. информацией.
//
&НаСервере
Функция ПолучитьДопИнформацию(СтрокаДерева)
	
	ДопИнф = "";
	
	Если ЗначениеЗаполнено(СтрокаДерева.СуммаДокумента) Тогда
		
		ДопИнф = "Сумма: " + Формат(СтрокаДерева.СуммаДокумента, "ЧДЦ=2; ЧН=0,00");
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВалютаДокумента) Тогда
			
			ДопИнф = ДопИнф + " " + СтрокаДерева.ВалютаДокумента;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДопИнф;
		
КонецФункции

// Процедура форматирует табличный документ.
//
// Параметры:
//  Таб - табличный документ.
//
Процедура ФорматированиеТаблицы(Таб)
	
	Область = Таб.Область();
	Область.ШиринаКолонки = 4;
	Область.ВысотаСтроки = 12; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ИмяТаблицыПоСсылке(Ссылка)
	Возврат Ссылка.Метаданные().ПолноеИмя();
КонецФункции

// Обрабатывает расшифровку области.
//
// Параметры:
//  Расшифровка - значение расшифровки области.
//
&НаКлиенте
Процедура РасшифровкаОбласти(Расшифровка)
	
	ПараметрыФормы = Новый Структура;
	
	Если Расшифровка.Тип = "Ссылка" Тогда
		
		ПараметрыФормы.Вставить("Ключ", Расшифровка.Ссылка);
		Форма = "ФормаОбъекта";
		
	ИначеЕсли Расшифровка.Тип = "Журнал" Тогда
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", Расшифровка.Ссылка);
		Форма = "ФормаСписка";
		
	КонецЕсли;

	ОткрытьФорму(ИмяТаблицыПоСсылке(Расшифровка.Ссылка) + "." + Форма, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДН ФОРМЫ

// Обработчик события Нажатие кнопки Обновить командной панели формы.
//
&НаКлиенте
Процедура Обновить(Элемент)
	
	Если ОбъектСсылка = Неопределено ИЛИ ОбъектСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Сформировать(ТаблицаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДляТекущего(Команда)
	
	ТекущийДокумент = Элементы.ТаблицаОтчета.ТекущаяОбласть.Расшифровка;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ДокументСсылка = ТекущийДокумент;
	Иначе
		Возврат;
	КонецЕсли;
	
	Сформировать(ТаблицаОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ОбработкаРасшифровки элемента формы ПолеТабличногоДокумента.
//
&НаКлиенте
Процедура ТаблицаОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифровкаОбласти(Расшифровка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектОтбора", ОбъектСсылка);
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОтказПриОткрытииФормы = Истина;
		Возврат;
	КонецЕсли;
	
	ИсходныйОбъект = ОбъектСсылка;
	
	Если ЗначениеЗаполнено(ИсходныйОбъект) Тогда
		ОбновитьДеревоСтруктурыПодчиненности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтказПриОткрытииФормы Тогда
		Предупреждение(НСтр("ru = 'Данная обработка вызывается из других процедур конфигурации. Интерактивное открытие запрещено.'"));
        Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
